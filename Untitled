# 小型编译器的实现及可视化研究
---

## 研究内容: 
完成一个小型语言的编译系统，包括
* 词法分析
* 语法分析
* 语义分析和中间代码生成
* 目标代码生成
* 该系统的可视化实现

---

## 该课题使用的源语言：Scheme 

 为什么要使用Scheme？ 

Scheme是Lisp语言的一种方言，语言核心非常精简，是基于“S表达式”的语法。

---

## 编译器开发语言：Scala

为什么要使用Scala？
* 拥有强大的面向对象特性，便于扩展和维护
* 可以使用Java世界里海量的开源项目，节省精力
* 包含优秀的函数式语言特性，远离Java繁冗的数据处理

> 后面的编译器示例代码均为Scala。

---

## 编译器后端：LLVM

LLVM的简单介绍：

Low Level Virtual Machine，是以C++编写而成构架编译器的框架系统。现下新型语言如Rust、Swift等均使用LLVM作为编译器后端。具体请查看：[LLVM](http://llvm.org/)

---

## 研究方案概述

*  词法分析：根据scheme源码生成词法单元序列
* 语法分析：根据词法单元序列生成抽象语法树
* 语义分析：对运算符的参数类型进行检查
* 中间代码生成：根据抽象语法树生成中间代码
* 目标代码生成：将中间代码编译成平台相关的目标代码
* 可视化实现：将以上阶段生成的数据在图形界面上表示出来

--- 

## 节点的结构
```
val file: String  // 用于标识该Node属于哪个文件
val start: Int   // 该Node在文件中的起始位置
val end: Int       // 结束位置
val row: Int       // 所在行数
val col: Int       // 所在列数
def interp(s: Scope): Value // 用于解释器求值
def typecheck(s: Scope): Value  // 用于类型检查
def codegen(s: Scope): org.jllvm.value.Value  // 用于中间代码生成
```
